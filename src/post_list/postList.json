{
    
    "post_nomal" :[
        {"title" : "" ,"context" : ""},
        {"title" : "세상" ,"context" : "<center><p1>삶이란 무엇일까. 가끔은 허무하기도 하고, 황망하기도 하고, 아무것도 아닌것 처럼 느껴진다. <br>하지만 지금이 있으면 된 것 이다. 지금이 행복하면 삶이 행복한거고, 미래도 행복할 것이다.<br>탐욕법, \"지금의 최선의 해가 나중에도 최선에 가까운 해가 된다.\"는 이 알고리즘은 어찌보면 인생의 진리가 아닐까.<br>나는 깊은 허무감에 찌들어 살았지만, 생각을 바꾸어보면 또 다를지도 모른다. 내가 보는만큼 세상이 보이는 것이다. <br>분명 나는 허무감을 항상 가슴에 품고있지만서도, 어딘가를 향한 열정을 가지고 있다. 달려보자, 나를 위해. </p1></center>"}
    ],
    "post_tech" :[
        {"title" : "project android-window controller" ,"context" : "프로젝트 개요 : 안드로이드 스마트폰의 음량 통제기능을 통하여 윈도우 컴퓨터의 사운드(추가 : 밝기)를 통제하는 App를 만든다. <br>중간 통신 방안 : bluetooth를 사용하여 시리얼 통신으로 한다<br>작용 기전 : <br>1. Android 혹은 ios cellphone으로 음량버튼을 누른다<br>2. 백그라운드에서 가동중인 cellphone 측 App가 bluetooth를 통해 연결된 window 컴퓨터를 조작하라는 명령을 내린다<br>3. Window측 app가 이 명령을 백그라운드에서 수신하고, 소리를 줄인다.<br><br> 선결조건 : C#개발이므로, Nuget을 잘 찾을 필요가 있음. 컴퓨터측 APP와 cellphone측 APP는 서로 다른 프로젝트로 생성<br> 고려사안 : 보안을 위한 암호화, bluetooth의 통신 방안."},
        {"title" : "code convention" ,"context" : "Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language.<br> code convention  : 프로그램 작성시에 추천되는 스타일, 관습, 그리고 문법상에서의 각각의 요소를 의미한다. <br>naming convention : 가독성을 좋게 하기위하여, 변수명을 naming할때 쓰는 규칙, 카멜, 파스칼 케이스 등이 있다.<br> 개인적으로 잘 안지키지만 생각보다 유지보수에 있어선 매우 중요한 원칙인 것 같다. co-op 때는 잘 지켜야지"},
        {"title" : " Arduino - C# 간 시리얼 통신 폼 및 온습도계 코드" ,"context" : "<h5>4월 11일 오전 기준 </h5><br><p1> Arduino 측 code </p1><br><code>#include \"DHT.h\"#define DHTPIN1 8 // PIN설정#define DHTTYPE DHT11   // DHT22 (AM2302) 센서종류 설정#include <Wire.h>                 // i2C 통신을 위한 라이브러리#include <LiquidCrystal_I2C.h>        // LCD 1602 I2C용 라이브러리#include <BH1750.h>                   // 광센서#include <SoftwareSerial.h>           // Bluetooth#define frequency 19200LiquidCrystal_I2C lcd(0x3F,20,4);     // 접근주소: 0x3F or 0x27BH1750 lightMeter;DHT dht1(DHTPIN1, DHTTYPE);int Bluetooth_TXpin = 2;int Bluetooth_RXpin = 3;SoftwareSerial CsSerial(Bluetooth_RXpin, Bluetooth_TXpin);char* myStr;float humid1;float tem1;float lux;int msg2;char vap[100];void setup(){Serial.begin(frequency);Serial.println(\"hello\");}void loop(){  String argu;  if(Serial.available()){    Serial.println(\"Load : sucess! argu :\");    argu = Serial.readString();    argu.trim();    Serial.println(argu);}  if(argu == \"humid\"){    humid1 = dht1.readHumidity();    tem1 = dht1.readTemperature();    if (isnan(humid1) || isnan(tem1)) {      Serial.println(\"Failed to read from DHT sensor!\");      return;    }    float hif = dht1.computeHeatIndex(tem1,humid1,false);    Serial.println(\"humid :\");    Serial.println(humid1);    Serial.println(\"tem :\");    Serial.println(hif);    delay(500);}  } </code><p1>C# desktop측 code (.NET 사용) </p1><br><code> public partial class Form1 : Form    {                private SerialPort arduinoSerial;        private string[] frequeny = { \"9600\",\"19200\",\"4800\" };        public Form1()        {            InitializeComponent();            arduinoSerial = new SerialPort();            string[] sp = SerialPort.GetPortNames();            comboBox1.DataSource = sp;            comboBox2.DataSource = frequeny;        }        private void label1_Click(object sender, EventArgs e)        {        }        private void Form1_Activated(object sender, System.EventArgs e)        {                    }        private void Form1_Load(object sender, EventArgs e)        {        }        private void button1_Click(object sender, EventArgs e)        {            if (arduinoSerial.IsOpen)            {                arduinoSerial.Close();            }            if(!arduinoSerial.IsOpen)            {                arduinoSerial.PortName = comboBox1.Text;                arduinoSerial.BaudRate =int.Parse(comboBox2.Text);                arduinoSerial.DataBits = 8;                arduinoSerial.Parity = Parity.None;                arduinoSerial.StopBits = StopBits.One;                arduinoSerial.DataReceived += new SerialDataReceivedEventHandler(arduinoSerial_DataReceived);                try                {                    arduinoSerial.Open();                                   }                catch (Exception ex)                {                    getSignal.Text = ex.Message;                }            }            else            {                getSignal.Text = \"지정된\" + comboBox1.Text + \"는 이미 열려있음\";            }        }        private byte[] strToByte(string str)        {            byte[] bytes = Encoding.UTF8.GetBytes(str);            return bytes;         }        private string byteToStr(byte[] bt)        {            string str = Encoding.UTF8.GetString(bt);            return str;        }        private void sentBtn_Click(object sender, EventArgs e)        {                        if (arduinoSerial.IsOpen == false)            {                return;            }            arduinoSerial.WriteLine(writeSignal.Text + \"\\n\");                    }        private void get_byte()        {            getSignal.Text = arduinoSerial.ReadLine();        }        private void getSignal_TextChanged(object sender, EventArgs e)        {        }        private void arduinoSerial_DataReceived(object o, EventArgs e)        {            if (arduinoSerial.IsOpen == false) { return; };                string resive_datap = arduinoSerial.ReadLine();                if (this.getSignal.InvokeRequired == true)                {                    this.getSignal.Invoke((MethodInvoker)delegate                     {                         getSignal.Text += string.Format(\"{0} \", resive_datap);                     });                }                else                {                    getSignal.Text += string.Format(\"{0} \", resive_datap);                }                   }        private void Form1_Load_1(object sender, EventArgs e)        {        }        List<float[]> tems = new List<float[]>();        private void button2_Click(object sender, EventArgs e)        {            string texts = getSignal.Text;            string[] str_log = texts.Split('\\n');            for (int i =0; i < str_log.Length; i++)            {                if(str_log[i] ==\"humid :\")                {                    float[] items = new float[] { float.Parse(str_log[i + 1]), float.Parse(str_log[i + 2])};                    tems.Add(items);                }            }            using (System.IO.StreamWriter csv = new System.IO.StreamWriter(@\"run.csv\"))            {                                while (tems.Count > 0)                {                    csv.WriteLine(\"{0},{1}\", tems[0][0],tems[0][1]);                    tems.RemoveAt(0);                }                             }        }    }</code><a href='https://twitter.com/presan100/status/1513330113777385476?s=20&t=zJLOfnD_X8GtYbR6ziwLyA'> <p1> 결과 </p1> </a>"},
        {"title" : "" ,"context" : ""},]
}   
